package com.example.demo.ctrl;

import com.example.demo.model.User;

import com.example.demo.repo.Userrepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;


@RestController
@CrossOrigin
@RequestMapping("/sdp")
public class Student {

    @Autowired
    private Userrepo userrepo;

    // Test Endpoints
    @GetMapping("/welcome")
    public String welcome() {
        return "It is running";
    }

    @GetMapping("/hello")
    public String hello() {
        return "Hello from Spring Boot!";
    }

    // Signin logic
    @PostMapping("/signin")
    public ResponseEntity<String> signin(
            @RequestParam String email,
            @RequestParam String password) {

        System.out.println("Signin attempt with email: " + email);

        User user = userrepo.findByEmail(email);

        if (user == null) {
            System.out.println("User not found with email: " + email);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid email or password.");
        }

        if (!user.getPassword().equals(password)) {
            System.out.println("Password mismatch for user: " + email);
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid email or password.");
        }

        System.out.println("Login successful for user: " + email);
        return ResponseEntity.ok("Login successful! Welcome " + user.getName() + " (" + user.getRole() + ")");
    }

    // Signup logic for Admin
    @PostMapping("/signup/admin")
    public ResponseEntity<String> signupAdmin(
            @RequestParam String name,
            @RequestParam String email,
            @RequestParam String password) {

        if (userrepo.findByEmail(email) != null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email is already in use.");
        }

        User newUser = new User();
        newUser.setName(name);
        newUser.setEmail(email);
        newUser.setPassword(password);  // In production, hash the password
        newUser.setRole("Admin");

        userrepo.save(newUser);

        return ResponseEntity.status(HttpStatus.CREATED).body("Admin registered successfully.");
    }

    // Signup logic for Student
    @PostMapping("/signup/student")
    public ResponseEntity<String> signupStudent(
            @RequestParam String name,
            @RequestParam String email,
            @RequestParam String password,
            @RequestParam Long phno,
            @RequestParam(required = false) MultipartFile profilePic) {

        try {
            if (userrepo.findByEmail(email) != null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email is already in use.");
            }

            User newUser = new User();
            newUser.setName(name);
            newUser.setEmail(email);
            newUser.setPassword(password);
            newUser.setRole("Student");
            newUser.setPhno(phno);

            // Save the profile picture if uploaded
            if (profilePic != null && !profilePic.isEmpty()) {
                String filePath = saveProfilePic(profilePic);
                newUser.setProfilePic(filePath);
            }

            userrepo.save(newUser);

            return ResponseEntity.status(HttpStatus.CREATED).body("Student registered successfully.");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving profile picture.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Signup failed: " + e.getMessage());
        }
    }

    // Signup logic for Faculty
    @PostMapping("/signup/faculty")
    public ResponseEntity<String> signupFaculty(
            @RequestParam String name,
            @RequestParam String email,
            @RequestParam String password,
            @RequestParam Long phno,
            @RequestParam String dept,
            @RequestParam(required = false) MultipartFile profilePic) {

        try {
            if (userrepo.findByEmail(email) != null) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email is already in use.");
            }

            User newUser = new User();
            newUser.setName(name);
            newUser.setEmail(email);
            newUser.setPassword(password);
            newUser.setRole("Faculty");
            newUser.setPhno(phno);
            newUser.setDept(dept);

            // Save the profile picture if uploaded
            if (profilePic != null && !profilePic.isEmpty()) {
                String filePath = saveProfilePic(profilePic);
                newUser.setProfilePic(filePath);
            }

            userrepo.save(newUser);

            return ResponseEntity.status(HttpStatus.CREATED).body("Faculty registered successfully.");
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving profile picture.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Signup failed: " + e.getMessage());
        }
    }

    // Helper method to save the profile picture to the server
    private String saveProfilePic(MultipartFile profilePic) throws IOException {
        if (profilePic != null && !profilePic.isEmpty()) {
            String uploadDir = "uploads/";
            java.io.File uploadDirFile = new java.io.File(uploadDir);
            if (!uploadDirFile.exists()) {
                uploadDirFile.mkdirs();  // Create the directory if it doesn't exist
            }

            String filePath = uploadDir + profilePic.getOriginalFilename();
            Path path = Paths.get(filePath);

            Files.copy(profilePic.getInputStream(), path, java.nio.file.StandardCopyOption.REPLACE_EXISTING);

            return filePath;  // Return the file path for saving in the database
        }
        return null;  // No profile picture uploaded
    }

    // Fetch user details including profile pic for logged-in user
    @GetMapping("/details/{email}")
    public ResponseEntity<?> getUserDetails(@PathVariable String email) {
        User user = userrepo.findByEmail(email);

        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found.");
        }

        // Prepare the response
        Map<String, Object> response = new HashMap<>();
        response.put("name", user.getName());
        response.put("email", user.getEmail());
        response.put("phno", user.getPhno());
        response.put("role", user.getRole());
        response.put("profilePic", user.getProfilePic());

        return ResponseEntity.ok(response);
    }
}
